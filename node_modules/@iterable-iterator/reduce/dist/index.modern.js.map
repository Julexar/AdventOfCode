{"version":3,"file":"index.modern.js","sources":["../src/_reduce.js","../src/_sum.js","../src/all.js","../src/any.js","../src/max.js","../src/min.js","../src/reduce.js","../src/some.js","../src/sum.js"],"sourcesContent":["/**\n * Applies the accumulator function iteratively on the last return value of the\n * accumulator and the next value in the input iterable. The initial value is\n * the initializer parameter.\n *\n * @example\n * _reduce( ( x , y ) => x + y , range( 10 ) , 0 ) ; // returns 45\n *\n * @example\n * _reduce( ( x , y ) => x + y , range( 10 ) , 100 ) ; // returns 145\n *\n * @param {Function} accumulator - The accumulator, a 2-ary function.\n * @param {Iterable} iterable - The input iterable.\n * @param {Object} initializer - The initial value of the reduction.\n * @returns {Object} - The reduction of the elements of <code>iterable</code>.\n */\nexport default function _reduce(accumulator, iterable, initializer) {\n\tfor (const item of iterable) {\n\t\tinitializer = accumulator(initializer, item);\n\t}\n\n\treturn initializer;\n}\n","/**\n * Sums the elements of the input iterable. An optional initializer parameter\n * allows to start the sum of the elements at a chosen value.\n *\n * @example\n * _sum( range( 10 ) , 0 ) ; // returns 45\n *\n * @example\n * _sum( range( 10 ) , 100 ) ; // returns 145\n *\n * @param {Iterable} iterable - The input iterable.\n * @param {Object} initializer - The initial value of the sum.\n * @returns {Object} - The sum of the initializer with the elements of\n * <code>iterable</code>.\n *\n */\nexport default function _sum(iterable, initializer) {\n\tfor (const item of iterable) {\n\t\tinitializer += item;\n\t}\n\n\treturn initializer;\n}\n","/**\n * Returns true if all of the elements of the input iterable are truthy.\n *\n * @example\n * all( repeat( true ) ) ; // loops forever\n *\n * @example\n * all( repeat( false ) ) ; // returns false\n *\n * @example\n * all( chain( [ nrepeat( true , 10 ) , repeat( false ) ) ) ; // returns false\n *\n * @param {Iterable} iterable - The input iterable.\n * @returns {Boolean} Returns <code>true</code> if all element of\n * <code>iterable</code> are truthy, <code>false</code> otherwise.\n */\nexport default function all(iterable) {\n\tfor (const item of iterable) {\n\t\tif (!item) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n","/**\n * Returns true if any of the elements of the input iterable is truthy.\n *\n * @example\n * any( repeat( true ) ) ; // returns true\n *\n * @example\n * any( repeat( false ) ) ; // loops forever\n *\n * @example\n * any( nrepeat( false , 10 ) ) ; // returns false\n *\n * @param {Iterable} iterable - The input iterable.\n * @returns {Boolean} Returns <code>true</code> if any element of\n * <code>iterable</code> is truthy, <code>false</code> otherwise.\n */\nexport default function any(iterable) {\n\tfor (const item of iterable) {\n\t\tif (item) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import {iter} from '@iterable-iterator/iter';\n\n/**\n * Returns the largest element of the input iterable according\n * to some comparison function.\n *\n * @example\n * max( ( a , b ) => a - b , range( 10 ) ) ; // returns 9\n *\n * @example\n * max( ( a , b ) => a - b , range( 0 ) ) ; // returns undefined\n *\n * @param {Function} compare - The comparison function to use. This function\n * must be 2-ary. It must return -1, 0, or 1 depending whether the first\n * parameter is, respectively, less than, equal to, or greater than the second\n * parameter.\n * @param {Iterable} iterable - The input iterable.\n * @param {Object} [dflt=undefined] - The default value to return in the case\n * that the input iterable is empty.\n * @returns {Object} The largest element of <code>iterable</code> according to\n * <code>compare</code>.\n */\nexport default function max(compare, iterable, dflt = undefined) {\n\tconst iterator = iter(iterable);\n\n\tconst first = iterator.next();\n\n\tif (first.done) {\n\t\treturn dflt;\n\t}\n\n\tlet largest = first.value;\n\n\tfor (const candidate of iterator) {\n\t\tif (compare(candidate, largest) > 0) {\n\t\t\tlargest = candidate;\n\t\t}\n\t}\n\n\treturn largest;\n}\n","import {iter} from '@iterable-iterator/iter';\n\n/**\n * Returns the smallest element of the input iterable according\n * to some comparison function.\n *\n * @example\n * min( ( a , b ) => a - b , range( 10 ) ) ; // returns 0\n *\n * @example\n * min( ( a , b ) => a - b , range( 0 ) ) ; // returns undefined\n *\n * @param {Function} compare - The comparison function to use. This function\n * must be 2-ary. It must return -1, 0, or 1 depending whether the first\n * parameter is, respectively, less than, equal to, or greater than the second\n * parameter.\n * @param {Iterable} iterable - The input iterable.\n * @param {Object} [dflt=undefined] - The default value to return in the case\n * that the input iterable is empty.\n * @returns {Object} The smallest element of <code>iterable</code> according to\n * <code>compare</code>.\n */\nexport default function min(compare, iterable, dflt = undefined) {\n\tconst iterator = iter(iterable);\n\n\tconst first = iterator.next();\n\n\tif (first.done) {\n\t\treturn dflt;\n\t}\n\n\tlet smallest = first.value;\n\n\tfor (const candidate of iterator) {\n\t\tif (compare(candidate, smallest) < 0) {\n\t\t\tsmallest = candidate;\n\t\t}\n\t}\n\n\treturn smallest;\n}\n","import _reduce from './_reduce.js';\nimport {iter} from '@iterable-iterator/iter';\n\n/**\n * Applies the accumulator function iteratively on the last return value of the\n * accumulator and the next value in the input iterable. The initial value is\n * the initializer parameter. If no initial value is given, the first element\n * of the input iterable is used.\n *\n * @example\n * _reduce( ( x , y ) => x + y , range( 10 ) , 0 ) ; // returns 45\n *\n * @example\n * _reduce( ( x , y ) => x + y , range( 10 ) , 100 ) ; // returns 145\n *\n * @param {Function} accumulator - The accumulator, a 2-ary function.\n * @param {Iterable} iterable - The input iterable.\n * @param {Object} [initializer=undefined] - The initial value of the reduction.\n * @returns {Object} - The reduction of the elements of <code>iterable</code>.\n */\nexport default function reduce(accumulator, iterable, initializer = undefined) {\n\tif (initializer === undefined) {\n\t\tconst iterator = iter(iterable);\n\t\tconst first = iterator.next();\n\n\t\tif (first.done) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn _reduce(accumulator, iterator, first.value);\n\t}\n\n\treturn _reduce(accumulator, iterable, initializer);\n}\n","/**\n * Returns true if at least some of the elements of the input iterable are\n * truthy.\n *\n * @example\n * some( repeat( true ) , 100 ) ; // returns true\n *\n * @example\n * some( repeat( false ) , 0 ) ; // returns true\n *\n * @example\n * some( repeat( false ) , 10 ) ; // loops forever\n *\n * @example\n * some( nrepeat( true , 10 ) , 11 ) ; // returns false\n *\n * @param {Iterable} iterable - The input iterable.\n * @param {Number} n - The number of elements that should be truthy.\n * @returns {Boolean} Returns <code>true</code> if at least <code>n</code>\n * elements of <code>iterable</code> are truthy, <code>false</code> otherwise.\n */\n\nexport default function some(iterable, n) {\n\tif (n <= 0) {\n\t\treturn true;\n\t}\n\n\tfor (const item of iterable) {\n\t\tif (item && --n === 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import _sum from './_sum.js';\n\n/**\n * Sums the elements of the input iterable. An optional initializer parameter\n * allows to start the sum of the elements at a chosen value. The default value\n * for the initializer parameter is <code>0</code>.\n *\n * @example\n * sum( range( 10 ) ) ; // returns 45\n *\n * @example\n * sum( range( 10 ) , 100 ) ; // returns 145\n *\n * @param {Iterable} iterable - The input iterable.\n * @param {Object} [initializer=0] - The initial value of the sum.\n * @returns {Object} - The sum of the initializer with the elements of\n * <code>iterable</code>.\n *\n */\nexport default function sum(iterable, initializer = 0) {\n\treturn _sum(iterable, initializer);\n}\n"],"names":["_reduce","accumulator","iterable","initializer","item","_sum","all","any","max","compare","dflt","iterator","iter","first","next","done","largest","value","candidate","min","smallest","reduce","undefined","some","n","sum"],"mappings":"wDAgBwBA,EAAQC,EAAaC,EAAUC,GACtD,IAAK,MAAMC,KAAQF,EAClBC,EAAcF,EAAYE,EAAaC,GAGxC,OAAOD,WCLgBE,EAAKH,EAAUC,GACtC,IAAK,MAAMC,KAAQF,EAClBC,GAAeC,EAGhB,OAAOD,WCLgBG,EAAIJ,GAC3B,IAAK,MAAME,KAAQF,EAClB,IAAKE,EACJ,SAIF,kBCPuBG,EAAIL,GAC3B,IAAK,MAAME,KAAQF,EAClB,GAAIE,EACH,SAIF,kBCDuBI,EAAIC,EAASP,EAAUQ,GAC9C,MAAMC,EAAWC,EAAKV,GAEhBW,EAAQF,EAASG,OAEvB,GAAID,EAAME,KACT,OAAOL,EAGR,IAAIM,EAAUH,EAAMI,MAEpB,IAAK,MAAMC,KAAaP,EACnBF,EAAQS,EAAWF,GAAW,IACjCA,EAAUE,GAIZ,OAAOF,WCjBgBG,EAAIV,EAASP,EAAUQ,GAC9C,MAAMC,EAAWC,EAAKV,GAEhBW,EAAQF,EAASG,OAEvB,GAAID,EAAME,KACT,OAAOL,EAGR,IAAIU,EAAWP,EAAMI,MAErB,IAAK,MAAMC,KAAaP,EACnBF,EAAQS,EAAWE,GAAY,IAClCA,EAAWF,GAIb,OAAOE,WCnBgBC,EAAOpB,EAAaC,EAAUC,GACrD,QAAoBmB,IAAhBnB,EAA2B,CAC9B,MAAMQ,EAAWC,EAAKV,GAChBW,EAAQF,EAASG,OAEvB,GAAID,EAAME,KACT,OAGD,OAAOf,EAAQC,EAAaU,EAAUE,EAAMI,OAG7C,OAAOjB,EAAQC,EAAaC,EAAUC,YCVfoB,EAAKrB,EAAUsB,GACtC,GAAIA,GAAK,EACR,SAGD,IAAK,MAAMpB,KAAQF,EAClB,GAAIE,GAAgB,KAANoB,EACb,SAIF,kBCduBC,EAAIvB,EAAUC,EAAc,GACnD,OAAOE,EAAKH,EAAUC"}